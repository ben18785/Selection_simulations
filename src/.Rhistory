gamma <- parameters[3]
mu_1 <- parameters[4]
mu_2 <- parameters[5]
mu_3 <- parameters[6]
mu_4 <- parameters[7]
E <- state[1]
C_1 <- state[2]
C_2 <- state[3]
C_3 <- state[4]
C_4 <- state[5]
dEdt <- alpha * E * (1 - E / ((1 - 0.5 * exp(-t)) * kappa))
dC1dt <- gamma * alpha * E / kappa - mu_1 * C_1
dC2dt <- mu_1 * C_1 - mu_2 * C_2
dC3dt <- mu_2 * C_2 - mu_3 * C_3
dC4dt <- mu_3 * C_3 - mu_4 * C_4
return(list(c(dEdt, dC1dt, dC2dt, dC3dt, dC4dt)))
}
soln <- ode(y=initial_state, times=time, func = spike_derivative, parms=unlist(params))
soln <- soln %>%
as.data.frame() %>%
mutate(C_1=C_1 / E,
C_2=C_2 / E,
C_3=C_3 / E,
C_4=C_4 / E) %>%
mutate(E=E / first(E),
C_1=C_1 / first(C_1),
C_2=C_2 / first(C_2),
C_3=C_3 / first(C_3),
C_4=C_4 / first(C_4)) %>%
melt(id.vars="time")
soln %>%
ggplot(aes(x=time, y=value, colour=as.factor(variable))) +
geom_line()
soln %>%
ggplot(aes(x=time, y=value, colour=as.factor(variable))) +
geom_line() +
theme_classic()
soln %>%
ggplot(aes(x=time, y=value, colour=as.factor(variable))) +
geom_line() +
theme_classic() +
scale_color_brewer("Variable", palette = "Dark2")
soln %>%
ggplot(aes(x=time, y=value, colour=as.factor(variable))) +
geom_line() +
theme_classic() +
scale_color_brewer("Variable", palette = "Dark2") +
scale_y_continuous(labels = scales::percent)
soln %>%
ggplot(aes(x=time, y=value, colour=as.factor(variable))) +
geom_line() +
theme_classic() +
scale_color_brewer("Variable", palette = "Dark2") +
scale_y_continuous(labels = scales::percent) +
ylab("Population density") +
xlab("Time, years")
spike_derivative <- function(t, state, parameters){
alpha <- parameters[1]
kappa <- parameters[2]
gamma <- parameters[3]
mu_1 <- parameters[4]
mu_2 <- parameters[5]
mu_3 <- parameters[6]
mu_4 <- parameters[7]
E <- state[1]
C_1 <- state[2]
C_2 <- state[3]
C_3 <- state[4]
C_4 <- state[5]
dEdt <- alpha * E * (1 - E / ((1 - 0.5 * exp(-2 * t)) * kappa))
dC1dt <- gamma * alpha * E / kappa - mu_1 * C_1
dC2dt <- mu_1 * C_1 - mu_2 * C_2
dC3dt <- mu_2 * C_2 - mu_3 * C_3
dC4dt <- mu_3 * C_3 - mu_4 * C_4
return(list(c(dEdt, dC1dt, dC2dt, dC3dt, dC4dt)))
}
soln <- ode(y=initial_state, times=time, func = spike_derivative, parms=unlist(params))
soln <- soln %>%
as.data.frame() %>%
mutate(C_1=C_1 / E,
C_2=C_2 / E,
C_3=C_3 / E,
C_4=C_4 / E) %>%
mutate(E=E / first(E),
C_1=C_1 / first(C_1),
C_2=C_2 / first(C_2),
C_3=C_3 / first(C_3),
C_4=C_4 / first(C_4)) %>%
melt(id.vars="time")
soln %>%
ggplot(aes(x=time, y=value, colour=as.factor(variable))) +
geom_line() +
theme_classic() +
scale_color_brewer("Variable", palette = "Dark2") +
scale_y_continuous(labels = scales::percent) +
ylab("Population density") +
xlab("Time, years")
spike_derivative <- function(t, state, parameters){
alpha <- parameters[1]
kappa <- parameters[2]
gamma <- parameters[3]
mu_1 <- parameters[4]
mu_2 <- parameters[5]
mu_3 <- parameters[6]
mu_4 <- parameters[7]
E <- state[1]
C_1 <- state[2]
C_2 <- state[3]
C_3 <- state[4]
C_4 <- state[5]
dEdt <- alpha * E * (1 - E / ((1 - 0.5 * exp(-10 * t)) * kappa))
dC1dt <- gamma * alpha * E / kappa - mu_1 * C_1
dC2dt <- mu_1 * C_1 - mu_2 * C_2
dC3dt <- mu_2 * C_2 - mu_3 * C_3
dC4dt <- mu_3 * C_3 - mu_4 * C_4
return(list(c(dEdt, dC1dt, dC2dt, dC3dt, dC4dt)))
}
soln <- ode(y=initial_state, times=time, func = spike_derivative, parms=unlist(params))
soln <- soln %>%
as.data.frame() %>%
mutate(C_1=C_1 / E,
C_2=C_2 / E,
C_3=C_3 / E,
C_4=C_4 / E) %>%
mutate(E=E / first(E),
C_1=C_1 / first(C_1),
C_2=C_2 / first(C_2),
C_3=C_3 / first(C_3),
C_4=C_4 / first(C_4)) %>%
melt(id.vars="time")
soln %>%
ggplot(aes(x=time, y=value, colour=as.factor(variable))) +
geom_line() +
theme_classic() +
scale_color_brewer("Variable", palette = "Dark2") +
scale_y_continuous(labels = scales::percent) +
ylab("Population density") +
xlab("Time, years")
spike_derivative <- function(t, state, parameters){
alpha <- parameters[1]
kappa <- parameters[2]
gamma <- parameters[3]
mu_1 <- parameters[4]
mu_2 <- parameters[5]
mu_3 <- parameters[6]
mu_4 <- parameters[7]
E <- state[1]
C_1 <- state[2]
C_2 <- state[3]
C_3 <- state[4]
C_4 <- state[5]
dEdt <- alpha * E * (1 - E / ((1 - 0.5 * exp(-2 * t)) * kappa))
dC1dt <- gamma * alpha * E / kappa - mu_1 * C_1
dC2dt <- mu_1 * C_1 - mu_2 * C_2
dC3dt <- mu_2 * C_2 - mu_3 * C_3
dC4dt <- mu_3 * C_3 - mu_4 * C_4
return(list(c(dEdt, dC1dt, dC2dt, dC3dt, dC4dt)))
}
soln <- ode(y=initial_state, times=time, func = spike_derivative, parms=unlist(params))
soln <- soln %>%
as.data.frame() %>%
mutate(C_1=C_1 / E,
C_2=C_2 / E,
C_3=C_3 / E,
C_4=C_4 / E) %>%
mutate(E=E / first(E),
C_1=C_1 / first(C_1),
C_2=C_2 / first(C_2),
C_3=C_3 / first(C_3),
C_4=C_4 / first(C_4)) %>%
melt(id.vars="time")
soln %>%
ggplot(aes(x=time, y=value, colour=as.factor(variable))) +
geom_line() +
theme_classic() +
scale_color_brewer("Variable", palette = "Dark2") +
scale_y_continuous(labels = scales::percent) +
ylab("Population density") +
xlab("Time, years")
ggsave("../outputs/non_linear_carcass_vs_pop_ode.pdf", g)
rm(list=ls())
rm(list = ls())
library(tidyverse)
library(lubridate)
library(deSolve)
simple_derivative <- function(t, state, parameters){
alpha <- parameters[1]
kappa <- parameters[2]
gamma <- parameters[3]
mu_1 <- parameters[4]
mu_2 <- parameters[5]
mu_3 <- parameters[6]
mu_4 <- parameters[7]
E <- state[1]
C_1 <- state[2]
C_2 <- state[3]
C_3 <- state[4]
C_4 <- state[5]
dEdt <- alpha * E * (1 - E / kappa)
dC1dt <- gamma * alpha * E / kappa - mu_1 * C_1
dC2dt <- mu_1 * C_1 - mu_2 * C_2
dC3dt <- mu_2 * C_2 - mu_3 * C_3
dC4dt <- mu_3 * C_3 - mu_4 * C_4
return(list(c(dEdt, dC1dt, dC2dt, dC3dt, dC4dt)))
}
time <- seq(0, 60, 0.1)
params <- list(alpha=0.1,
kappa=1000,
gamma=1,
mu_1=1,
mu_2=1,
mu_3=1,
mu_4=1)
E_0 <- params$kappa
C_1_0 <- params$alpha * params$gamma * E_0 / (params$kappa * params$mu_1)
C_2_0 <- params$mu_1 * C_1_0 / params$mu_2
C_3_0 <- params$mu_2 * C_2_0 / params$mu_3
C_4_0 <- params$mu_3 * C_3_0 / params$mu_4
initial_state <- c(E=E_0,
C_1=C_1_0,
C_2=C_2_0,
C_3=C_3_0,
C_4=C_4_0)
# check I have equilibria correct
ode(y=initial_state, times=time, func = simple_derivative, parms=unlist(params)) %>%
as.data.frame() %>%
mutate(C_1=C_1 / E,
C_2=C_2 / E,
C_3=C_3 / E,
C_4=C_4 / E) %>%
melt(id.vars="time") %>%
filter(variable!="E") %>%
ggplot(aes(x=time, y=value, colour=as.factor(variable))) +
geom_line()
spike_derivative <- function(t, state, parameters){
alpha <- parameters[1]
kappa <- parameters[2]
gamma <- parameters[3]
mu_1 <- parameters[4]
mu_2 <- parameters[5]
mu_3 <- parameters[6]
mu_4 <- parameters[7]
E <- state[1]
C_1 <- state[2]
C_2 <- state[3]
C_3 <- state[4]
C_4 <- state[5]
dEdt <- alpha * E * (1 - E / ((1 - 0.5 * exp(-2 * t)) * kappa))
dC1dt <- gamma * alpha * E / kappa - mu_1 * C_1
dC2dt <- mu_1 * C_1 - mu_2 * C_2
dC3dt <- mu_2 * C_2 - mu_3 * C_3
dC4dt <- mu_3 * C_3 - mu_4 * C_4
return(list(c(dEdt, dC1dt, dC2dt, dC3dt, dC4dt)))
}
soln <- ode(y=initial_state, times=time, func = spike_derivative, parms=unlist(params))
soln <- soln %>%
as.data.frame() %>%
mutate(C_1=C_1 / E,
C_2=C_2 / E,
C_3=C_3 / E,
C_4=C_4 / E) %>%
mutate(E=E / first(E),
C_1=C_1 / first(C_1),
C_2=C_2 / first(C_2),
C_3=C_3 / first(C_3),
C_4=C_4 / first(C_4)) %>%
melt(id.vars="time")
g <-
soln %>%
ggplot(aes(x=time, y=value, colour=as.factor(variable))) +
geom_line() +
theme_classic() +
scale_color_brewer("Variable", palette = "Dark2") +
scale_y_continuous(labels = scales::percent) +
ylab("Population density") +
xlab("Time, years")
g
ggsave("../outputs/non_linear_carcass_vs_pop_ode.pdf", g)
ggsave("../outputs/non_linear_carcass_vs_pop_ode.png", g)
52/3
simple_derivative <- function(t, state, parameters){
alpha <- parameters[1]
kappa <- parameters[2]
gamma <- parameters[3]
mu_1 <- parameters[4]
mu_2 <- parameters[5]
mu_3 <- parameters[6]
mu_4 <- parameters[7]
E <- state[1]
C_1 <- state[2]
C_2 <- state[3]
C_3 <- state[4]
C_4 <- state[5]
dEdt <- alpha * E * (1 - E / kappa)
dC1dt <- gamma * alpha * E / kappa - mu_1 * C_1
dC2dt <- mu_1 * C_1 - mu_2 * C_2
dC3dt <- mu_2 * C_2 - mu_3 * C_3
dC4dt <- mu_3 * C_3 - mu_4 * C_4
return(list(c(dEdt, dC1dt, dC2dt, dC3dt, dC4dt)))
}
time <- seq(0, 60, 0.1)
# use estimates from Chris' World Bank doc for decay rates
params <- list(alpha=0.1,
kappa=1000,
gamma=1,
mu_1=17,
mu_2=2,
mu_3=1,
mu_4=1)
E_0 <- params$kappa
C_1_0 <- params$alpha * params$gamma * E_0 / (params$kappa * params$mu_1)
C_2_0 <- params$mu_1 * C_1_0 / params$mu_2
C_3_0 <- params$mu_2 * C_2_0 / params$mu_3
C_4_0 <- params$mu_3 * C_3_0 / params$mu_4
initial_state <- c(E=E_0,
C_1=C_1_0,
C_2=C_2_0,
C_3=C_3_0,
C_4=C_4_0)
# check I have equilibria correct
ode(y=initial_state, times=time, func = simple_derivative, parms=unlist(params)) %>%
as.data.frame() %>%
mutate(C_1=C_1 / E,
C_2=C_2 / E,
C_3=C_3 / E,
C_4=C_4 / E) %>%
melt(id.vars="time") %>%
filter(variable!="E") %>%
ggplot(aes(x=time, y=value, colour=as.factor(variable))) +
geom_line()
spike_derivative <- function(t, state, parameters){
alpha <- parameters[1]
kappa <- parameters[2]
gamma <- parameters[3]
mu_1 <- parameters[4]
mu_2 <- parameters[5]
mu_3 <- parameters[6]
mu_4 <- parameters[7]
E <- state[1]
C_1 <- state[2]
C_2 <- state[3]
C_3 <- state[4]
C_4 <- state[5]
dEdt <- alpha * E * (1 - E / ((1 - 0.5 * exp(-2 * t)) * kappa))
dC1dt <- gamma * alpha * E / kappa - mu_1 * C_1
dC2dt <- mu_1 * C_1 - mu_2 * C_2
dC3dt <- mu_2 * C_2 - mu_3 * C_3
dC4dt <- mu_3 * C_3 - mu_4 * C_4
return(list(c(dEdt, dC1dt, dC2dt, dC3dt, dC4dt)))
}
soln <- ode(y=initial_state, times=time, func = spike_derivative, parms=unlist(params))
soln <- soln %>%
as.data.frame() %>%
mutate(C_1=C_1 / E,
C_2=C_2 / E,
C_3=C_3 / E,
C_4=C_4 / E) %>%
mutate(E=E / first(E),
C_1=C_1 / first(C_1),
C_2=C_2 / first(C_2),
C_3=C_3 / first(C_3),
C_4=C_4 / first(C_4)) %>%
melt(id.vars="time")
g <-
soln %>%
ggplot(aes(x=time, y=value, colour=as.factor(variable))) +
geom_line() +
theme_classic() +
scale_color_brewer("Variable", palette = "Dark2") +
scale_y_continuous(labels = scales::percent) +
ylab("Population density") +
xlab("Time, years")
g
ggsave("../outputs/non_linear_carcass_vs_pop_ode.png", g)
simple_derivative <- function(t, state, parameters){
alpha <- parameters[1]
kappa <- parameters[2]
gamma <- parameters[3]
mu_1 <- parameters[4]
mu_2 <- parameters[5]
mu_3 <- parameters[6]
mu_4 <- parameters[7]
E <- state[1]
C_1 <- state[2]
C_2 <- state[3]
C_3 <- state[4]
C_4 <- state[5]
dEdt <- alpha * E * (1 - E / kappa)
dC1dt <- gamma * alpha * E / kappa - mu_1 * C_1
dC2dt <- mu_1 * C_1 - mu_2 * C_2
dC3dt <- mu_2 * C_2 - mu_3 * C_3
dC4dt <- mu_3 * C_3 - mu_4 * C_4
return(list(c(dEdt, dC1dt, dC2dt, dC3dt, dC4dt)))
}
time <- seq(0, 20, 0.1)
# use estimates from Chris' World Bank doc for decay rates
params <- list(alpha=0.1,
kappa=1000,
gamma=1,
mu_1=17,
mu_2=2,
mu_3=1,
mu_4=1)
E_0 <- params$kappa
C_1_0 <- params$alpha * params$gamma * E_0 / (params$kappa * params$mu_1)
C_2_0 <- params$mu_1 * C_1_0 / params$mu_2
C_3_0 <- params$mu_2 * C_2_0 / params$mu_3
C_4_0 <- params$mu_3 * C_3_0 / params$mu_4
initial_state <- c(E=E_0,
C_1=C_1_0,
C_2=C_2_0,
C_3=C_3_0,
C_4=C_4_0)
# check I have equilibria correct
ode(y=initial_state, times=time, func = simple_derivative, parms=unlist(params)) %>%
as.data.frame() %>%
mutate(C_1=C_1 / E,
C_2=C_2 / E,
C_3=C_3 / E,
C_4=C_4 / E) %>%
melt(id.vars="time") %>%
filter(variable!="E") %>%
ggplot(aes(x=time, y=value, colour=as.factor(variable))) +
geom_line()
spike_derivative <- function(t, state, parameters){
alpha <- parameters[1]
kappa <- parameters[2]
gamma <- parameters[3]
mu_1 <- parameters[4]
mu_2 <- parameters[5]
mu_3 <- parameters[6]
mu_4 <- parameters[7]
E <- state[1]
C_1 <- state[2]
C_2 <- state[3]
C_3 <- state[4]
C_4 <- state[5]
dEdt <- alpha * E * (1 - E / ((1 - 0.5 * exp(-2 * t)) * kappa))
dC1dt <- gamma * alpha * E / kappa - mu_1 * C_1
dC2dt <- mu_1 * C_1 - mu_2 * C_2
dC3dt <- mu_2 * C_2 - mu_3 * C_3
dC4dt <- mu_3 * C_3 - mu_4 * C_4
return(list(c(dEdt, dC1dt, dC2dt, dC3dt, dC4dt)))
}
soln <- ode(y=initial_state, times=time, func = spike_derivative, parms=unlist(params))
soln <- soln %>%
as.data.frame() %>%
mutate(C_1=C_1 / E,
C_2=C_2 / E,
C_3=C_3 / E,
C_4=C_4 / E) %>%
mutate(E=E / first(E),
C_1=C_1 / first(C_1),
C_2=C_2 / first(C_2),
C_3=C_3 / first(C_3),
C_4=C_4 / first(C_4)) %>%
melt(id.vars="time")
g <-
soln %>%
ggplot(aes(x=time, y=value, colour=as.factor(variable))) +
geom_line() +
theme_classic() +
scale_color_brewer("Variable", palette = "Dark2") +
scale_y_continuous(labels = scales::percent) +
ylab("Population density") +
xlab("Time, years")
g
ggsave("../outputs/non_linear_carcass_vs_pop_ode.png", g)
spike_derivative <- function(t, state, parameters){
alpha <- parameters[1]
kappa <- parameters[2]
gamma <- parameters[3]
mu_1 <- parameters[4]
mu_2 <- parameters[5]
mu_3 <- parameters[6]
mu_4 <- parameters[7]
E <- state[1]
C_1 <- state[2]
C_2 <- state[3]
C_3 <- state[4]
C_4 <- state[5]
dEdt <- alpha * E * (1 - E / ((1 - 0.9 * exp(-2 * t)) * kappa))
dC1dt <- gamma * alpha * E / kappa - mu_1 * C_1
dC2dt <- mu_1 * C_1 - mu_2 * C_2
dC3dt <- mu_2 * C_2 - mu_3 * C_3
dC4dt <- mu_3 * C_3 - mu_4 * C_4
return(list(c(dEdt, dC1dt, dC2dt, dC3dt, dC4dt)))
}
soln <- ode(y=initial_state, times=time, func = spike_derivative, parms=unlist(params))
soln <- soln %>%
as.data.frame() %>%
mutate(C_1=C_1 / E,
C_2=C_2 / E,
C_3=C_3 / E,
C_4=C_4 / E) %>%
mutate(E=E / first(E),
C_1=C_1 / first(C_1),
C_2=C_2 / first(C_2),
C_3=C_3 / first(C_3),
C_4=C_4 / first(C_4)) %>%
melt(id.vars="time")
g <-
soln %>%
ggplot(aes(x=time, y=value, colour=as.factor(variable))) +
geom_line() +
theme_classic() +
scale_color_brewer("Variable", palette = "Dark2") +
scale_y_continuous(labels = scales::percent) +
ylab("Population density") +
xlab("Time, years")
g
ggsave("../outputs/non_linear_carcass_vs_pop_ode.png", g)
